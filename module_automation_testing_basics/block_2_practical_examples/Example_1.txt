Рассмотрим простой практический пример написания автоматических тестов.

Дан следующий класс:

class EvenNumber {

    public boolean isEven(int number) {
        return number % 2 == 0;
    }

}

В этом классе реализован алгоритм определения является ли
целое число чётным.

Нам нужно написать автоматические тесты на этот класс.

Рассмотрим пошагово как написать простые автоматические тесты.

Шаг номер 1: Создание тестового класса.

Когда речь заходит о создании автоматических тестов,
то код проекта разделяют на две части:
- продакшн код;
- тестовый код.

Продакшн кодом называют код, который реализует бизнес требования
и выполняется на продакшн среде. Продакшн средой называется
среда, где с приложением взаимодействуют реальные пользователи.

Тестовым кодом или просто тестами называется код, который
содержит автоматические тесты. Эти тесты предназначены для
проверки продакшн кода.

Тесты используются только в процессе разработки программы
или при её модификации (изменении функциональности). Тесты
не используются на продакшн среде, там где с приложением
взаимодействуют конечные пользователи.

Для того чтобы можно было легко отделить продакшн код от тестов
принято писать тесты в отдельных классах. Тогда их легко можно
будет отделить от продакшн кода и сделать так, чтобы тесты не
попали на продакшн среду, там где с приложением
взаимодействуют конечные пользователи.

Автоматические тесты для конкретного класса принято размещать
в отдельном классе, который называется точно так же, но в конец
названия добавляется слово Test. Например, тесты для класса
EvenNumber могут находиться в классе EvenNumberTest. Если
соблюдать такое правило наименования тестовых классов, то
в коде будет легко найти класс в котором находятся тесты
для продакшн класса и наоборот.

Рядом (в том же пакете) с классом EvenNumber
создайте класса с названием EvenNumberTest.


Шаг номер 2: Генерирование (придумывание) тестовых данных.

Рассмотрим что из себя представляют тестовые данные на примере
класса EvenNumber. В данном классе есть метод
    boolean isEven(int number) {...}
работу которого мы и хотим протестировать. Мы видим, что данный
метод принимает на вход один параметр, который должен быть
целым числом. В качестве результата этот метод возвращает
значение типа boolean.

Поэтому одним набором тестовых данных
для тестирования этого метода может быть следующий:
    - входной параметр number = 2;
    - ожидаемый результат = true.

Другой пример набором тестовых данных:
    - входной параметр number = 3;
    - ожидаемый результат = false.

Ещё пример набора тестовых данных:
    - входной параметр number = 10;
    - ожидаемый результат = true.

То есть, набор тестовых данных представляет собой:
 - данные подаваемые в качестве входных параметров
   в тестируемый метод;
 - ожидаемый результат, который должен вернуть тестируемый метод
   в случае его вызова с указанными входными параметрами.

Ожидаемый результат обычно рассчитывается вручную основываясь
на выдвинутых к тестируемому коду бизнес требованиях.


PS: подсказка - тестовые данные можно записать внутри тестового
класса в виде многострочного комментария:

class EvenNumberTest {

    /*
        Test data 1: number = 2, expected result = true.
        Test data 2: number = 3, expected result = false.
    */

}


PS: подсказка - НЕ переходите к реализации (написанию кода)
сразу после придумывания первого набора тестовых данных.
Сгенерите (придумайте) все возможные различные тестовые наборы
и запишите их в виде комментариев в тестовом классе, чтобы не
забыть их при написании самих тестов. Концентрация только на генерации
тестовых данных позволит вам придумать более качественные тестовые
данные, которые покроют собой все возможные различные варианты
использования тестируемого кода. И только после того, как вы
закончили генерацию тестовых данных и записали их в комментариях
переходите к реализации (написанию кода) самих тестов.



Шаг номер 3: Реализация (кодирование) тестовых сценариев.

Из каких шагов состоит тестовый сценарий?
Тестовый сценарий состоит из трёх основных шагов:
- подготовка тестовых данных (входные данные + ожидаемый результат);
- вызов продакшн кода и получение реального результата;
- сравнение реального результата с ожидаемым результатом.

Шаг подготовки тестовых данных мы уже выполнили одним шагом выше.
Теперь нам осталось написать код для каждого набора тестовых данных.
Каждый подготовленный нами тестовый набор описывает один из
возможных сценариев тестирования кода. Для написания автоматических
тестов нужно в тестовом классе для каждого тестового набора создать
отдельный метод (смотри пример ниже):

class EvenNumberTest {

    /*
        Test data 1: number = 2, expected result = true.
        Test data 2: number = 3, expected result = false.
    */

    public void testCase1() {

    }

    public void testCase2() {

    }

}

Что бы превратить заготовки тестовых методов в полноценные
тестовые сценарии нам надо написать код внутри каждого из них.
Внутри каждого тестового метода нам нужно написать код, который
выполняет три шага:
- подготовка тестовых данных (входные данные + ожидаемый результат);
- вызов продакшн кода и получение реального результата;
- сравнение реального результата с ожидаемым результатом.

Вот пример для первого тестового сценария:

    public void testCase1() {
        // подготовка тестовых данных
        int number = 2;

        // вызов продакшн кода и получение реального результата
        EvenNumber evenNumber = new EvenNumber();
        boolean realResult = evenNumber.isEven(number);

        // сравнение реального результата с ожидаемым результатом
        if (realResult == true) {
            System.out.println("Test case 1 = OK!");
        } else {
            System.out.println("Test case 1 = FAIL!");
        }
    }

А вот пример для второго тестового сценария:

    public void testCase1() {
        // подготовка тестовых данных
        int number = 3;

        // вызов продакшн кода и получение реального результата
        EvenNumber evenNumber = new EvenNumber();
        boolean realResult = evenNumber.isEven(number);

        // сравнение реального результата с ожидаемым результатом
        if (realResult == false) {
            System.out.println("Test case 2 = OK!");
        } else {
            System.out.println("Test case 2 = FAIL!");
        }
    }

Вы наверное заметили, что код наших тестов в разы больше кода,
который они тестируют. Не переживайте по этому поводу! Мы чуть
позже покажем как можно оптимизировать код тестов и сделать их
более компактными. На данном этапе важно, чтобы вы чётко запомнили
последовательность из трёх шагов в написании тестов, которая была
описана выше.



Шаг номер 4: Запуск тестовых сценариев.

Для того чтобы запустить тестовые сценарии, выполните следующее:
    - создайте в тестовом классе main() метод;
    - в main() методе создайте экземпляр тестового класса;
    - вызовете по порядку все тестовые методы.

Вот пример как это можно сделать:

class EvenNumberTest {

    public static void main(String[] args) {
        EvenNumberTest test = new EvenNumberTest();
        test.testCase1();
        test.testCase2();
    }

    public void testCase1() { ... }

    public void testCase2() { ... }

}


Создание тестов закончилось. Теперь осталось их запустить
и посмотреть на результаты их работы, которые будут
распечатаны в консоли.