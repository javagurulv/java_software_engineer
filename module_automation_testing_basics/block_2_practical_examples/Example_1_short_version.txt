Пошаговая инструкция написания простых автоматических тестов.


Опишем пошаговую инструкцию по созданию автоматических тестов
на простом практическом примере.

Дан следующий класс:

class EvenNumber {

    public boolean isEven(int number) {
        return number % 2 == 0;
    }

}

В этом классе реализован алгоритм определения является ли
целое число чётным.

Нам нужно написать автоматические тесты на этот класс.

Далее приведена пошаговая инструкция создания простых
(без применения дополнительных библиотек) автоматических тестов.


Шаг номер 1: Создание тестового класса.

Рядом (в том же пакете) с классом EvenNumber
создайте класса с названием EvenNumberTest.


Шаг номер 2: Генерирование (придумывание) тестовых данных.

Тестовые данные можно записать внутри тестового
класса в виде многострочного комментария:

class EvenNumberTest {

    /*
        Test data 1: number = 2, expected result = true.
        Test data 2: number = 3, expected result = false.
    */

}



Шаг номер 3: Реализация (кодирование) тестовых сценариев.

Для написания автоматических тестов нужно в тестовом классе д
ля каждого тестового набора создать отдельный метод (смотри пример ниже):

class EvenNumberTest {

    /*
        Test data 1: number = 2, expected result = true.
        Test data 2: number = 3, expected result = false.
    */

    public void testCase1() {

    }

    public void testCase2() {

    }

}

Внутри каждого тестового метода нам нужно написать код,
который выполняет три шага:
- подготовка тестовых данных (входные данные + ожидаемый результат);
- вызов продакшн кода и получение реального результата;
- сравнение реального результата с ожидаемым результатом.

Вот пример для первого тестового сценария:

    public void testCase1() {
        // подготовка тестовых данных
        int number = 2;

        // вызов продакшн кода и получение реального результата
        EvenNumber evenNumber = new EvenNumber();
        boolean realResult = evenNumber.isEven(number);

        // сравнение реального результата с ожидаемым результатом
        if (realResult == true) {
            System.out.println("Test case 1 = OK!");
        } else {
            System.out.println("Test case 1 = FAIL!");
        }
    }

А вот пример для второго тестового сценария:

    public void testCase1() {
        // подготовка тестовых данных
        int number = 3;

        // вызов продакшн кода и получение реального результата
        EvenNumber evenNumber = new EvenNumber();
        boolean realResult = evenNumber.isEven(number);

        // сравнение реального результата с ожидаемым результатом
        if (realResult == false) {
            System.out.println("Test case 2 = OK!");
        } else {
            System.out.println("Test case 2 = FAIL!");
        }
    }

PS: вы наверное заметили, что код наших тестов в разы больше кода,
который они тестируют. Не переживайте по этому поводу! Мы чуть
позже покажем как можно оптимизировать код тестов и сделать их
более компактными. На данном этапе важно, чтобы вы чётко запомнили
последовательность из трёх шагов в написании тестов, которая была
описана выше.



Шаг номер 4: Запуск тестовых сценариев.

Для того чтобы запустить тестовые сценарии, выполните следующее:
    - создайте в тестовом классе main() метод;
    - в main() методе создайте экземпляр тестового класса;
    - вызовете по порядку все тестовые методы.

Вот пример как это можно сделать:

class EvenNumberTest {

    public static void main(String[] args) {
        EvenNumberTest test = new EvenNumberTest();
        test.testCase1();
        test.testCase2();
    }

    public void testCase1() { ... }

    public void testCase2() { ... }

}


Создание тестов закончилось. Теперь осталось их запустить
и посмотреть на результаты их работы, которые будут
распечатаны в консоли.