Какие бывают подходы к тестированию?

Можно выделить два подхода к тестированию:
- ручное тестирование;
- автоматическое тестирование.

Ручное тестирование - это когда вы запускаете программу и
начинаете взаимодействовать с ней как конечный пользователь,
вводя данные и проверяя полученные результаты. Этот процесс
выполняется в ручную, человеком. Поэтому такой подход к тестированию
и называется ручным тестированием.

Например, если у вас есть следующая программа:

class EvenNumber {

    public static void main(String[] args) {
        System.out.println("Please, enter new number: ");
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        EvenNumber evenNumber = new EvenNumber();
        boolean isEven = evenNumber.isEven(number);
        System.out.println("Number is even = " + isEven);
    }

    public boolean isEven(int number) {
        return number % 2 == 0;
    }

}

Вы можете запустить эту программу, ввести с консоли целое число
и проверить какой результат распечатает на консоль программа.
Если это необходимо, вы сможете повторить приведённые выше действия
и проверить работу программы введя с консоли другое число.

У такого подхода есть много недостатков!

Первый заключается в скорости выполнения тестов (тестовых сценариев).
Если тесты выполняет человек, это всегда происходит медленно (по
сравнению с компьютером)! Человек может выполнять тесты (тестировать)
только с определённой не большой скоростью.

А теперь представьте сколько времени потребуется человеку для того,
чтобы протестировать работу большой системы? Дни, недели, месяцы, годы?

Как ускорить этот процесс? Только наняв больше людей (тестировщиков)
и дав им возможность тестировать приложение параллельно. Больше людей,
больше расходов на зарплаты, больше проблем в организации работы и
коммуникации.

А что если в функционал приложения нужно внести изменения и
всё придётся протестировать заново? А в реальной жизни при разработке
программного обеспечения изменения в код вносятся регулярно!

Есть ли решение проблем описанных выше и связанных с ручным тестированием?

Да есть! Оно называется автоматическое тестирование!

Только представьте себе, что ваш код будет тестировать не человек,
а другая программа! Каково это? Это и есть автоматическое тестирование!

В автоматическом тестировании человек (тестировщик) заменяется
программой, которая совершает те же самые действия, что и человек
при тестировании (готовит тестовые данные, вызывает код, подаёт в него
входные данные, проверяет полученный результат). Только автоматический
тест делает это во много раз быстрее человека! Его легко запустить
повторно, если необходимо протестировать изменения в программном коде.
Автоматическому тесту не нужно платить зарплату! Автоматический тест
это тоже код, он сохраняется в проекте и им легко воспользоваться
повторно!

Далее приведён пример автоматических тестов класса EvenNumber
(детали реализации автоматических тестов мы разберём чуть позже):

class EvenNumberTest {

    public static void main(String[] args) {
        EvenNumberTest test = new EvenNumberTest();
        test.testEvenNumber();
        test.testOddNumber();
    }

    public void testEvenNumber() {
        int number = 4;
        EvenNumber evenNumber = new EvenNumber();
        boolean result = evenNumber.isEven(number);
        if (result == true) {
            System.out.println("TEST OK!");
        } else {
            System.out.println("TEST FAIL!");
        }
    }

    public void testOddNumber() {
        int number = 5;
        EvenNumber evenNumber = new EvenNumber();
        boolean result = evenNumber.isEven(number);
        if (result == false) {
            System.out.println("TEST OK!");
        } else {
            System.out.println("TEST FAIL!");
        }
    }

}
