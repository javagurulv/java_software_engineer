Зачем программисту тестировать свой код?

Вы наверное слышали, что в ИТ есть специальная профессия - тестировщик
(QA - Quality Assurance). Это действительно так, специалисты по
тестированию принимают активное участие в процессе разработки
программного решение на всех этапах. Именно они помогают выпускать
стабильные и устойчивые программные решения.

Раз есть тестировщики, зачем программисту тестировать свой код?

Это резонный вопрос! Давайте попробуем на него ответить.

Результатом работы программиста является написанный им код.
Когда вашим решением (кодом) начинают пользоваться конечные
пользователи это всегда волнительный момент. Ведь пользователи
могут всё поломать! Вы хотите спать спокойно при развёртывании
вашего программного кода на продакшн среду? Или вы готовы
бессонными ночами исправлять ошибки и чинить в стрессе продакшн
среду?

Хорошо протестированное программное решение даёт уверенность
программисту, что написанный им код будет работать правильно
и не ломаться при взаимодействии с ним конечных пользователей.
Поверьте крепкий сон дорогого стоит!


Вы наверное слышали о понятиях clean code и refactoring?

Clean code (чистый код) это код легко читаемый и понимаемый
человеком. Да, именно человеком, а не компьютером, потому что
в первую очередь хороший чистый код пишется для человека.

Рефакторинг в программировании - это процесс изменения
структуры и внутреннего устройства кода, без изменения
его внешнего поведения. Целью рефакторинга является
улучшение читаемости, понимаемости, поддерживаемости,
эффективности и расширяемости кода, а также устранение
дублирования и улучшение его общего качества.

Без тестов контролируемый рефакторинг не возможен.
Так как в процессе выполнения рефакторинга меняется код,
то с этими изменениями в код могут быть добавлены ошибки.

И наконец наше самое любимое. Тесты могут выступать барометром
качества продакшн кода. Если продакшн код качественный,
то тесты для него будут простыми и понятными, их будет легко
писать и менять в случае необходимости. А если продакшн код плохой
(длинные методы, большие классы)
то тесты на такой код будут очень громоздкими, их будет сложно
создавать, они будут покрывать только некоторые сценарии. Если
задуматься об этой разнице при написании тестов, то сами тесты
будут выступать барометром качества продакшн кода.


Надеемся, что приведённые выше аргументы убедили вас в том, что
продакшн код программисту надо тестировать!
