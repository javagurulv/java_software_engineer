Перед тем как показать наш код доменной модели давайте обсудим
какой тип данных используется для представления денег в Java.

Первое, что приходит на ум это конечно тип данных double или float.

В Java (и во многих других языках программирования)
для представления денег обычно не используют типы
с плавающей запятой (double или float). Это связано
с проблемами точности и округления, которые могут возникнуть
при использовании типов с плавающей точкой в финансовых расчетах.

Основные причины, по которым не рекомендуется использовать
double или float для представления денежных значений:

1. **Потеря точности**: Типы с плавающей точкой не могут
представить некоторые числа точно из-за их двоичной природы.
Это может привести к потере точности при выполнении арифметических
операций, особенно при округлении до двух знаков после запятой.

2. **Проблемы с округлением**: В финансовых расчетах важно точно
округлять денежные значения. При использовании типов с плавающей
точкой округление может быть непредсказуемым из-за ошибок округления.

3. **Подход к представлению денег**: В финансовых расчетах обычно
используются фиксированные точности и представление денежных сумм
в целочисленных значениях (например, в копейках, центах или
других наименьших денежных единицах).

Вместо double или float для представления денег в Java
рекомендуется использовать целочисленные типы данных,
такие как int или long, и представлять денежные суммы
в наименьших денежных единицах (например, копейках).
Это позволяет избежать проблем с точностью и округлением,
обеспечивая надежные и предсказуемые результаты финансовых операций.

Кроме того, в Java есть классы, такие как BigDecimal,
которые предоставляют высокую точность и контроль над
округлением и позволяют более точно работать с денежными значениями.
BigDecimal используется для точных денежных расчетов, когда
необходимо избежать ошибок округления и обеспечить точность
до определенного числа знаков после запятой.

Ваша задача: познакомиться с типом данных BigDecimal.
Изучить как
- создавать объекты этого типа
- выполнять арифметические операции
- округлять значение до нужной точности
- использовать константы этого типа (ZERO, ONE, TEN).


Совет: при изучении новых классов не просто читайте теорию в
интернете, но и попробуйте выполнить действия на практическом
примере. Для этого в коде приложения создайте класс
(например BigDecimalPractice) и внутри его метода main()
поэкспериментируйте с изучаемыми концепциями на реальных примерах
(желательно из своей жизни). Практика позволит вам лучше понять
и усвоить изучаемый материал. Так же в качестве эксперимента
можете использовать тесты, сразу проверяя правильность результатов.