3. Проектирование и дизайн решения (алгоритма).

В предыдущих заданиях мы разработали модель данных.
Это хорошее начальное приближение, если в будущем будет необходимо
мы всегда сможем вернуться к модели данных и улучшить ее.

А теперь пришла пора приступать к разработке алгоритма.

Напомним, что в нашей задаче под алгоритмом понимается
процесс расчёта стоимости страхового полиса.

Итак, приступим к работе над проектированием и дизайном решения (алгоритма).

С чего же нам следует начать?

Может сразу приступим к написанию кода?

Может сначала напишем acceptance тесты,
а потом будем писать код как в TDD?

Возьмём лист бумаги и нарисуем блок-схему алгоритма?


Хм ... нам кажется, что правильнее всего начать вот с чего.

Давайте встанем (виртуально) на сторону клиента нашего будущего
решения. Под клиентом тут понимается человек или другая программа,
которая будет пользоваться нашим решением (расчётом стоимости
страхового полиса).

Любое ИТ решение состоит из множества частей, которые друг с другом
взаимодействуют! Для разработки хорошего решения нужно сделать так,
чтобы вашим решением было удобно пользоваться. А для этого нужно
встать на сторону клиента вашего кода и понять как клиент будет
взаимодействовать с вашим будущим решением.

Для того чтобы понять как клиент будет взаимодействовать с
вашим будущим решением нужно ответить на следующие вопросы:
- какие входные данные клиент будет предоставлять нашему решению на вход?
- какой результат клиент ожидает получить от нашего решения?
- как буквально клиент будет вызывать наше решение (API)?


Клиент -> наше решение.

Клиент вызывает наше решение.

Клиент при вызове передаёт входные данные.

Клиент ожидает получить результат (в каком виде).

Как конкретно клиент будет вызывать наше решение,
как будет происходить взаимодействие
(интерфейс, вызов метода, и так далее)?



